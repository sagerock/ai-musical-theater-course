rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user is global admin
    function isGlobalAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user has teaching permissions in a course
    function hasTeachingPermissionsInCourse(courseId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/courseMemberships/$(request.auth.uid + '_' + courseId)) &&
             get(/databases/$(database)/documents/courseMemberships/$(request.auth.uid + '_' + courseId)).data.role in ['teaching_assistant', 'instructor', 'school_administrator'] &&
             get(/databases/$(database)/documents/courseMemberships/$(request.auth.uid + '_' + courseId)).data.status == 'approved';
    }
    
    // Helper function to check if user has student assistant permissions in a course
    function hasStudentAssistantPermissionsInCourse(courseId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/courseMemberships/$(request.auth.uid + '_' + courseId)) &&
             get(/databases/$(database)/documents/courseMemberships/$(request.auth.uid + '_' + courseId)).data.role in ['student_assistant', 'teaching_assistant', 'instructor', 'school_administrator'] &&
             get(/databases/$(database)/documents/courseMemberships/$(request.auth.uid + '_' + courseId)).data.status == 'approved';
    }
    
    // Helper function to check if user is instructor in a course (legacy - use hasTeachingPermissionsInCourse for new code)
    function isInstructorInCourse(courseId) {
      return hasTeachingPermissionsInCourse(courseId);
    }
    
    // Helper function to check if user is member of a course
    function isMemberOfCourse(courseId) {
      return isAuthenticated() &&
             courseId != null &&
             exists(/databases/$(database)/documents/courseMemberships/$(request.auth.uid + '_' + courseId)) &&
             get(/databases/$(database)/documents/courseMemberships/$(request.auth.uid + '_' + courseId)).data.status == 'approved';
    }
    
    // Helper function to check if user has teaching permissions globally
    function hasTeachingPermissions() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['teaching_assistant', 'instructor', 'school_administrator'];
    }
    
    // Helper function to check if user has teaching permissions in any course
    function hasTeachingPermissionsInAnyCourse() {
      // This is a simplified check - in practice, we check if they have the teaching permissions function
      // or if they're trying to access data related to courses where they have teaching permissions
      return hasTeachingPermissions();
    }
    
    // Helper function to check if user has instructor role (legacy - use hasTeachingPermissions for new code)
    function hasInstructorRole() {
      return hasTeachingPermissions();
    }
    
    // Restrict data repair operations to admins only
    function canPerformDataRepair() {
      return isGlobalAdmin();
    }
    
    // Helper function to check if user owns the project referenced in an instructor note
    function ownsProjectForNote(noteData) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/projects/$(noteData.projectId)) &&
             (get(/databases/$(database)/documents/projects/$(noteData.projectId)).data.createdBy == request.auth.uid ||
              get(/databases/$(database)/documents/projects/$(noteData.projectId)).data.created_by == request.auth.uid);
    }
    
    // Helper function to check if user is a school administrator
    function isSchoolAdministrator() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'school_administrator';
    }
    
    // Helper function to check if school administrator can access course (same school)
    function isSchoolAdministratorForCourse(courseId) {
      return isSchoolAdministrator() &&
             exists(/databases/$(database)/documents/courses/$(courseId)) &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.schoolId == get(/databases/$(database)/documents/courses/$(courseId)).data.schoolId;
    }
    
    // USERS COLLECTION - Secure user profile access for educational environment
    match /users/{userId} {
      // In an educational platform, basic user profiles (name, email) should be readable by authenticated users
      // This allows Teaching Assistants and other course staff to see student names in their courses
      allow read: if isAuthenticated();
      
      // Only allow write access to own profile, admins, or data repair functions
      allow write: if isOwner(userId) || isGlobalAdmin() || canPerformDataRepair();
      
      // Allow instructors, teaching assistants and admins to query/list users for course management and data repair
      allow list: if isAuthenticated() && (hasTeachingPermissions() || isGlobalAdmin() || canPerformDataRepair());
    }

    // COURSES COLLECTION - Basic course info
    match /courses/{courseId} {
      // Course members and admins can read full course info
      // For course joining: users can read course info but only basic fields will be accessible
      allow read: if isMemberOfCourse(courseId) || isGlobalAdmin() || isAuthenticated();
      
      // Allow authenticated users to query courses by accessCode for joining
      allow list: if isAuthenticated();
      
      // Admins and instructors can create courses, instructors can update courses they teach
      allow create: if isGlobalAdmin() || hasInstructorRole();
      allow update: if isGlobalAdmin() || isInstructorInCourse(courseId) || hasInstructorRole();
      // Admins can delete any course, instructors can delete courses they created or teach
      allow delete: if isGlobalAdmin() || 
                       (exists(/databases/$(database)/documents/courses/$(courseId)) &&
                        get(/databases/$(database)/documents/courses/$(courseId)).data.createdBy == request.auth.uid) ||
                       isInstructorInCourse(courseId);
    }

    // COURSE MEMBERSHIPS - User can see their own, instructors can see their course members
    match /courseMemberships/{membershipId} {
      // Format: userId_courseId
      allow read: if isAuthenticated() && (
        membershipId.matches(request.auth.uid + '_.*') || // Own membership
        isInstructorInCourse(resource.data.courseId) ||   // Instructor in course
        hasStudentAssistantPermissionsInCourse(resource.data.courseId) ||  // Student assistants can see course memberships
        isGlobalAdmin()                                   // Global admin
      );
      
      // Allow collection queries for getting user's own memberships, for instructors, and for student assistants
      allow list: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||       // User's own memberships
        isInstructorInCourse(resource.data.courseId) ||   // Instructors can see all memberships in their courses
        hasStudentAssistantPermissionsInCourse(resource.data.courseId) ||  // Student assistants can see course memberships
        hasInstructorRole() ||                            // Users with instructor role can query
        isGlobalAdmin()                                   // Global admin can query all
      );
      
      // Users can request to join courses (create pending memberships) OR instructors/admins can create memberships
      allow create: if isAuthenticated() && (
        // Users creating their own pending memberships
        (membershipId.matches(request.auth.uid + '_.*') &&
         request.resource.data.userId == request.auth.uid &&
         request.resource.data.status == 'pending') ||
        // Course creator can add themselves as instructor (check if they created the course)
        (exists(/databases/$(database)/documents/courses/$(request.resource.data.courseId)) &&
         get(/databases/$(database)/documents/courses/$(request.resource.data.courseId)).data.createdBy == request.auth.uid &&
         request.resource.data.role == 'instructor' &&
         request.resource.data.status == 'approved') ||
        // Instructors can create memberships for their courses
        isInstructorInCourse(request.resource.data.courseId) ||
        // Global admins can create any membership
        isGlobalAdmin()
      );
      
      // Instructors can approve/deny memberships, admins can do anything, 
      // and users can update their own rejected memberships back to pending for re-requests
      allow update, delete: if isInstructorInCourse(resource.data.courseId) || 
                               isGlobalAdmin() || 
                               (membershipId.matches(request.auth.uid + '_.*') &&
                                resource.data.userId == request.auth.uid &&
                                resource.data.status == 'rejected' &&
                                request.resource.data.status == 'pending');
    }

    // PROJECTS COLLECTION - Owner or instructor access
    match /projects/{projectId} {
      // Users can read their own projects + instructors can read student projects + student assistants can read peer projects
      allow read: if isAuthenticated() && (
        isOwner(resource.data.createdBy) ||              // Project owner (createdBy)
        isOwner(resource.data.created_by) ||             // Project owner (created_by)
        isInstructorInCourse(resource.data.courseId) ||  // Instructor in course
        hasStudentAssistantPermissionsInCourse(resource.data.courseId) ||  // Student assistants can view peer projects
        isSchoolAdministratorForCourse(resource.data.courseId) ||  // School administrators can view projects in their school's courses
        isGlobalAdmin()                                  // Global admin
      );
      
      // Users can create projects if they're the creator and (no course or member of course)
      allow create: if isAuthenticated() &&
                   (request.resource.data.createdBy == request.auth.uid ||
                    request.resource.data.created_by == request.auth.uid) && (
                     request.resource.data.courseId == null ||     // No course required
                     isMemberOfCourse(request.resource.data.courseId)  // Member of course
                   );

      // Users can update/delete their own projects
      allow update, delete: if isAuthenticated() && (
        isOwner(resource.data.createdBy) ||              // Project owner (createdBy)
        isOwner(resource.data.created_by) ||             // Project owner (created_by)
        isGlobalAdmin()                                  // Global admin
      );
      
      // Allow list queries for projects (filtered by read rules)
      allow list: if isAuthenticated();
    }

    // CHATS COLLECTION - Owner or instructor access (most sensitive data)
    match /chats/{chatId} {
      // Students can read their own chats, instructors can read student chats from their courses
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||                 // Chat owner
        isInstructorInCourse(resource.data.courseId) ||  // Instructor in course
        isGlobalAdmin()                                  // Global admin
      );
      
      // Allow collection queries for authenticated users (filtered by read rules above)
      allow list: if isAuthenticated();
      
      // Only chat owners can create/update their chats (students can't see others' chats)
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid && (
                     request.resource.data.courseId == null ||     // No course required
                     isMemberOfCourse(request.resource.data.courseId)  // Member of course
                   );
      
      allow update: if isOwner(resource.data.userId) || 
                       isGlobalAdmin() || 
                       isInstructorInCourse(resource.data.courseId) ||
                       // Allow instructors to fix orphaned chats (when userId doesn't exist)
                       (hasInstructorRole() && request.resource.data.keys().hasAll(['fixedOrphan', 'originalUserId']));
      allow delete: if isOwner(resource.data.userId) || isGlobalAdmin();
    }

    // PDF ATTACHMENTS - Linked to chats, inherit chat access rules
    match /pdfAttachments/{attachmentId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||                 // Attachment owner
        isGlobalAdmin()                                  // Global admin
        // TODO: Add instructor access via chat lookup when needed
      );
      
      // Allow list queries for authenticated users (they'll only see their own due to read rules)
      allow list: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
      
      allow update, delete: if isOwner(resource.data.userId) || isGlobalAdmin();
    }

    // INSTRUCTOR NOTES - Instructor annotations visible to project owners (now supports threaded conversations)
    match /instructorNotes/{noteId} {
      // Only allow reading notes if:
      // 1. User owns the project the note is about
      // 2. User is an instructor in the course
      // 3. User is an admin
      allow read: if isAuthenticated() && (
        // Check if user owns the project
        (exists(/databases/$(database)/documents/projects/$(resource.data.projectId)) &&
         (get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.createdBy == request.auth.uid ||
          get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.created_by == request.auth.uid)) ||
        // Or user is instructor in the course
        isInstructorInCourse(resource.data.courseId) ||
        // Or user is admin
        isGlobalAdmin()
      );

      // Same restrictions for listing
      allow list: if isAuthenticated() && (
        // Note: list operations will be filtered by the read rule above
        hasInstructorRole() ||  // Instructors can query
        isGlobalAdmin() ||       // Admins can query
        request.auth.uid != null // Regular users can query (but only see their notes due to read rule)
      );

      // Very simple create rule - just check authorId matches
      allow create: if isAuthenticated() &&
        request.resource.data.authorId == request.auth.uid;

      // Allow updates only by the original author of the note
      // Fixed to check resource.data (existing doc) not request.resource.data (incoming data)
      allow update: if isAuthenticated() &&
        resource.data.authorId == request.auth.uid;

      // Allow deletion by the author or admin
      allow delete: if isAuthenticated() && (
        resource.data.authorId == request.auth.uid ||
        isGlobalAdmin()
      );
    }

    // REFLECTIONS - Student learning reflections
    match /reflections/{reflectionId} {
      // Students can access their own reflections, instructors can read student reflections
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||                 // Reflection owner
        isInstructorInCourse(resource.data.courseId) ||  // Instructor in course
        isGlobalAdmin()                                  // Global admin
      );
      
      // Allow collection queries for users to find their own reflections and for instructors
      allow list: if isAuthenticated() && (
        request.auth.uid != null ||                      // Authenticated users can query
        hasInstructorRole() ||                           // Users with instructor role
        isGlobalAdmin()                                  // Global admin
      );
      
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid &&
                   isMemberOfCourse(request.resource.data.courseId);
      
      allow update, delete: if isOwner(resource.data.userId) || isGlobalAdmin();
    }

    // TAGS - Course-specific tags
    match /tags/{tagId} {
      // Course members can read tags, instructors/admins can manage them
      allow read: if isAuthenticated() && (
        resource.data.courseId == null ||               // Global tags (no course)
        isMemberOfCourse(resource.data.courseId) ||     // Course member
        isGlobalAdmin()                                  // Global admin
      );
      
      // Allow collection queries for course members and admins
      allow list: if isAuthenticated();
      
      allow create: if isAuthenticated() && (
        request.resource.data.courseId == null ||       // Global tags (no course)
        isInstructorInCourse(request.resource.data.courseId) ||  // Instructor in course
        isGlobalAdmin()                                  // Global admin
      );
      
      allow update, delete: if isAuthenticated() && (
        resource.data.courseId == null ||               // Global tags (no course)
        isInstructorInCourse(resource.data.courseId) ||  // Instructor in course
        isGlobalAdmin()                                  // Global admin
      );
    }

    // CHAT TAGS - Junction table for chat-tag relationships
    match /chatTags/{chatTagId} {
      // Users can read their own chat tags, instructors can read student chat tags in their courses
      allow read: if isAuthenticated() && (
        // Chat owner can read their own tags
        exists(/databases/$(database)/documents/chats/$(resource.data.chatId)) &&
        get(/databases/$(database)/documents/chats/$(resource.data.chatId)).data.userId == request.auth.uid ||
        // Instructors can read tags for chats in their courses
        exists(/databases/$(database)/documents/chats/$(resource.data.chatId)) &&
        isInstructorInCourse(get(/databases/$(database)/documents/chats/$(resource.data.chatId)).data.courseId) ||
        // Global admins can read all
        isGlobalAdmin()
      );
      
      // Allow collection queries but filtered by read rules above
      allow list: if isAuthenticated();
      
      // Users can create/modify tags for their own chats, instructors for student chats in their courses
      allow create: if isAuthenticated() && (
        // Chat owner can tag their own chats
        exists(/databases/$(database)/documents/chats/$(request.resource.data.chatId)) &&
        get(/databases/$(database)/documents/chats/$(request.resource.data.chatId)).data.userId == request.auth.uid ||
        // Instructors can tag chats in their courses
        exists(/databases/$(database)/documents/chats/$(request.resource.data.chatId)) &&
        isInstructorInCourse(get(/databases/$(database)/documents/chats/$(request.resource.data.chatId)).data.courseId) ||
        // Global admins can create any tags
        isGlobalAdmin()
      );
      
      allow update, delete: if isAuthenticated() && (
        // Chat owner can modify tags on their own chats
        exists(/databases/$(database)/documents/chats/$(resource.data.chatId)) &&
        get(/databases/$(database)/documents/chats/$(resource.data.chatId)).data.userId == request.auth.uid ||
        // Instructors can modify tags for chats in their courses
        exists(/databases/$(database)/documents/chats/$(resource.data.chatId)) &&
        isInstructorInCourse(get(/databases/$(database)/documents/chats/$(resource.data.chatId)).data.courseId) ||
        // Global admins can modify any tags
        isGlobalAdmin()
      );
    }

    // COURSE ANALYTICS - Server-side computed analytics data
    match /courseAnalytics/{courseId} {
      // Instructors, school administrators (for their school's courses), and admins can read course analytics
      allow read: if isAuthenticated() && (
        isInstructorInCourse(courseId) ||                    // Instructor in course
        isSchoolAdministratorForCourse(courseId) ||         // School administrator for course's school
        isGlobalAdmin()                                      // Global admin
      );
      
      // Allow collection queries for instructors, school administrators, and admins
      allow list: if isAuthenticated() && (
        hasInstructorRole() ||                               // Users with instructor role
        isSchoolAdministrator() ||                           // School administrators
        isGlobalAdmin()                                      // Global admin
      );
      
      // Only Cloud Functions should write analytics data (or admins for manual operations)
      allow write: if isGlobalAdmin();
    }

    // CONTACT REQUESTS - Public contact form submissions
    match /contactRequests/{requestId} {
      // Allow anyone to create contact requests (needed for public info request form)
      // This is for potential customers who aren't logged in yet
      // Consider adding reCAPTCHA on the frontend to prevent spam
      allow create: if true;

      // Only admins can read/manage contact requests
      allow read, update, delete: if isGlobalAdmin();

      // Allow admins to query/list contact requests
      allow list: if isGlobalAdmin();
    }

    // SCHOOLS - Educational institution management
    match /schools/{schoolId} {
      // Anyone can read active schools (for course creation dropdown)
      allow read: if isAuthenticated() && 
                     (resource.data.isActive == true || isGlobalAdmin());
      
      // Only global admins can create, update, or delete schools
      allow create, update, delete: if isGlobalAdmin();
      
      // Allow listing schools for authenticated users
      allow list: if isAuthenticated();
    }
    
    // HELP REQUESTS - Internal user support requests
    match /helpRequests/{requestId} {
      // Authenticated users can create help requests
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
      
      // Users can read their own help requests, admins can read all
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||                     // Request creator
        isGlobalAdmin()                                      // Global admin
      );
      
      // Only admins can update/delete help requests (for status management)
      allow update, delete: if isGlobalAdmin();
      
      // Users can query their own requests, admins can query all
      allow list: if isAuthenticated();
    }
    
    // COURSE MATERIALS - Instructor-managed library of course documents
    match /courseMaterials/{materialId} {
      // All course members can read visible materials, instructors can read all materials
      allow read: if isAuthenticated() && (
        // Students can read visible materials in their courses
        (resource.data.visibility == 'visible' && isMemberOfCourse(resource.data.courseId)) ||
        // Instructors and TAs can read all materials in their courses
        hasTeachingPermissionsInCourse(resource.data.courseId) ||
        // Global admins can read all materials
        isGlobalAdmin()
      );

      // Allow collection queries for course members
      allow list: if isAuthenticated();

      // Only instructors and TAs can create course materials
      allow create: if isAuthenticated() && (
        hasTeachingPermissionsInCourse(request.resource.data.courseId) ||
        isGlobalAdmin()
      );

      // Only instructors and TAs can update/delete course materials
      allow update, delete: if isAuthenticated() && (
        hasTeachingPermissionsInCourse(resource.data.courseId) ||
        isGlobalAdmin()
      );
    }

    // ANNOUNCEMENTS - Course announcements with instructor control
    match /announcements/{announcementId} {
      // All course members can read announcements
      allow read: if isAuthenticated() && (
        isMemberOfCourse(resource.data.courseId) ||
        isGlobalAdmin()
      );

      // Allow collection queries for course members
      allow list: if isAuthenticated();

      // Only instructors and TAs can create announcements
      allow create: if isAuthenticated() && (
        hasTeachingPermissionsInCourse(request.resource.data.courseId) ||
        isGlobalAdmin()
      );

      // Authors can update their own announcements, instructors can update any
      // OR any authenticated user can update only the commentCount field
      allow update: if isAuthenticated() && (
        isOwner(resource.data.authorId) ||
        hasTeachingPermissionsInCourse(resource.data.courseId) ||
        isGlobalAdmin() ||
        // Allow any authenticated user to update only commentCount
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['commentCount']))
      );

      // Authors can delete their own, instructors can delete any
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.authorId) ||
        hasTeachingPermissionsInCourse(resource.data.courseId) ||
        isGlobalAdmin()
      );
    }

    // ANNOUNCEMENT COMMENTS - All course members can comment
    match /announcementComments/{commentId} {
      // Anyone can read comments (filtered by announcement access)
      allow read: if isAuthenticated();

      // Allow collection queries
      allow list: if isAuthenticated();

      // Any authenticated user can create comments if they set themselves as the author
      allow create: if isAuthenticated() &&
                      request.resource.data.authorId == request.auth.uid;

      // Authors can update their own comments
      allow update: if isAuthenticated() &&
                      resource.data.authorId == request.auth.uid ||
                      isGlobalAdmin();

      // Authors can delete their own comments, instructors can delete any comment in their course, admins can delete any
      allow delete: if isAuthenticated() && (
        resource.data.authorId == request.auth.uid ||
        // Check if user is instructor for the course (via announcement)
        hasTeachingPermissionsInCourse(get(/databases/$(database)/documents/announcements/$(resource.data.announcementId)).data.courseId) ||
        isGlobalAdmin()
      );
    }
  }
}